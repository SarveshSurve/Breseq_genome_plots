#Written by Ben Kerr see Lindsey et. al. 2013 https://www.nature.com/articles/nature11879
#Updated by Olivia Kosterlitz 2020-02-01

#This function will plot the mutations in a set of strains from a set of treatments
#The arguments are described below

#Function arguments:
#-------------------
# raw.seq.df is the data frame with all the mutations (must have the following columns: 
# treatment, strain, base, mut.type and delta.bases (note: each mutation would be listed as its own row)
# N.bases is number of bases in the gene or the genome. This is the length of the reference sequence used to call variants for each strain.
# section.colors is a vector giving the colors of the highlighted sections (make this long enough to cover all possible sections)
# treatments is a vector of all the treatments as they appear in the data frame
# treatment.colors is a vector of the colors for each treatment
# treatment.labels is a vector with the labels to place on the mutation table
# gene.color is the color of the gene in the figure (default="ivory"). This is the top bar in the figure. 
# gene.width is the width of the gene in the figure (default=0.05). This is the width of the top bar. 
# min.gap.length is minimum number of bases consecutive mutations need to spaced in order to be in different sections (default=30bp)
# section.buffer is number of bases subtracted and added to the ends of each section to buffer the sections in the figure (default=1bp)
# mag.spacer is width of the spacing between the gene and the section header of the table of mutations (default=0.1)
# tab.spacer is width of the spacing between the section header and the table of mutations (default=0.01)
# treatment.label.cex is the size of the text of the treatment labels (default=1.0)
# treatment.label.spacer is the spacing between the table and the treatment labels (default=0.02)
# mutation.colors are the colors of the different types of mutations in the table (default is snp="white", ins="gray", del="black")
# hist.spacer is the spacing between the table and the histogram (default=0.02)
# hist.unit.height is the height of "one mutation" in the histogram (default=0.015) 
# hist.axis.spacer is the spacing between the histogram and its axis (default=0.02) 
# hist.ticks.length is the length of the ticks on the histogram axis (default=0.005)
# hist.numbers.cex is the size of the text of the numbers on the histogram axis (default=0.6) 
# hist.numbers.spacer is the spacing between the ticks and the numbers (default=0.01)
# hist.label is the label on the histogram axis (default="number of\nmutations") 
# hist.label.spacer is the spacing between the numbers and label on the histogram (default=0.05) 
# hist.label.cex is the size of the text of the label on the histogram axis (default=0.6)
# xmin is the minimum x value of the plot (default=-0.05)
# xmax is the maximum x value of the plot (default=1.1)
# ymin is the minimum y value of the plot (default=-0.1)
# ymax is the maximum y value of the plot (default=1)
# row.spec.width is the width for strains if you want to override the automatic calculation. 
#-------------------


raw.seq.df <- read.csv("plot_variants.csv", header=TRUE)
N.bases <- 4641652
section.colors <- c("snow3","snow2")
bp.fill <- TRUE
bp.colors <- c('ivory', 'ivory3')
treatments <- unique(raw.seq.df$treatment) # default is all of the treatments. User can pass a subset of the samples if desired
treatment.colors <- c("mistyrose3", "mistyrose", "lightsteelblue3", "lightsteelblue1", "lightgoldenrod1")
treatment.labels <- treatments
gene.color="ivory"
gene.width = 0.025
gene.section.border = 'black' #can set this to NA to turn it off
mag.border = NA #can turn on by supplying a color
min.gap.length=30 #can also set this to gene. If number is provided this is the number of bp between variants to plot them in the same 'zoomed section'
section.buffer=1
mag.spacer=0.075
tab.spacer=0.01
treatment.label.cex=1
treatment.label.spacer=0.00
snp.mutation.color="red"
ins.mutation.color="black"
del.mutation.color="white"
hist.spacer=0.015
hist.unit.height=0.5
hist.axis.spacer=0.02
hist.ticks.length=0.01
hist.numbers.cex=1.2
hist.numbers.spacer=0.04
hist.label="number of variants"
hist.label.spacer=0.1
hist.label.cex=1.2
xmin=-0.2
xmax = 1+hist.unit.height+hist.spacer+0.05
ymin= -0.1
ymax=1.05
row.spec.width=0
border.color="lightyellow4"
treatment.border.color="black"

#start file
pdf(file = "ByGene.pdf",
    width = 15,
    height = 8)

#Reserve space for the plot
plot(c(xmin,xmax),c(ymin,ymax),col="white",axes=FALSE,ylab="",xlab="")

#Draw full gene
rect(0, 1-gene.width, 1, 1, col=gene.color) #xleft, ybottom, xright, ytop

#Pick the specified treatments out of the data frame
focal.raw.seq.df<-raw.seq.df[is.element(raw.seq.df$treatment,treatments),]	

#Construct site vectors/parameters
focal.raw.seq.df.order <- focal.raw.seq.df[order(focal.raw.seq.df$base),] # orders the mutations by position
sites <- sort(unique(focal.raw.seq.df$base)) #gets all the positions for sites that will be plotted that are unique
genes <- vector(mode="character", length=length(sites)) # a vector for the gene names for each mutation
for (i in c(1:length(sites))) {
  genes[i] <- toString(focal.raw.seq.df$gene[focal.raw.seq.df$base==sites[i]][1])
}
Nsit <- length(sites) #number of variant sites that will be plotted

#Determine the number and boundaries of genetic sections to plot
sec.init <- (sites[1]-section.buffer) #grabs the first site with a mutation and subtracts the amount of bp before the variant to start plotting
if(Nsit == 1) { #if the number of variant site is one
  sec.fin <- (sites[1]+section.buffer) 
  N.sec <- 1
}
if(Nsit > 1) { #if there is more than one variant site to plot
  N.sec <- 1 # counts the number of sections to be drawn
  j <- 1
  for(i in 2:Nsit) { #loop through the number of variants starting at 2. For example, i will be 2 then 3 then 4
    if (min.gap.length != "gene") {
      if((sites[i]-sites[i-1]) > min.gap.length) { #if the current mutation is more than the space specified between variants to be plotted in the same panel. Do this loop!
        sec.init <- c(sec.init, sites[i]-section.buffer) #add to the section initiation vector the starting position for the panel
        ifelse(j==1, sec.fin <- sites[i-1] + section.buffer, sec.fin <- c(sec.fin,sites[i-1]+section.buffer)) # if on the first section initiate the sec.fin vector else append to the vector
        j <- j+1
        N.sec <- N.sec+1
      }
    } else {
      if (genes[i] != genes[i-1]) { #if the current mutation is not in the same gene as the previous variant, Do this loop!
        sec.init<-c(sec.init,sites[i]-section.buffer) #add to the section initiation vector the starting position for the panel
        ifelse(j==1,sec.fin<-sites[i-1]+section.buffer,sec.fin<-c(sec.fin,sites[i-1]+section.buffer))
        j<-j+1
        N.sec<-N.sec+1
      }
    }
  }
  sec.fin<-c(sec.fin,sites[Nsit]+section.buffer)
}	

section.colors <- rep(section.colors, ceiling(N.sec/length(section.colors)))
#Draw sections on gene
for(i in 1:N.sec) {
  rect(sec.init[i]/N.bases, 1-gene.width, sec.fin[i]/N.bases, 1, col=section.colors[i], border=gene.section.border) #xleft, ybottom, xright, ytop
}	
lines(c(0,1),c(1,1))

#Compute the lengths of each section and total length of all sections
new.run <- numeric(N.sec) # length (bp) of each section
tot <- 0 # total length (bp) of all sections
for(i in 1:N.sec) {
  new.run[i] <- (sec.fin[i]-sec.init[i])+1 #this needed a plus one
  tot <- tot + new.run[i]
}

#Put together "new" sections that are confluent on the interval [0,1], preserving relative lengths
new.sec.init <- numeric(N.sec)
new.sec.fin <- numeric(N.sec)
tot2 <- 0
for(i in 1:N.sec) {
  new.sec.init[i] <- tot2
  new.sec.fin[i] <- tot2+(new.run[i]/tot)
  tot2 <- tot2 + (new.run[i]/tot)
}

#"Magnify" the sections
for(i in 1:N.sec) {
  polygon(c(sec.init[i]/N.bases, new.sec.init[i], new.sec.fin[i], sec.fin[i]/N.bases),
          c(1-gene.width, 1-gene.width-mag.spacer, 1-gene.width-mag.spacer, 1-gene.width),
          col = section.colors[i], border = mag.border) #the x vector c(top left, bottom left, bottom right, top right), the y vector (top left, bottom left, bottom right, top right)
}
lines(c(0,1),c(1-gene.width,1-gene.width))


#Function to organize strains in a list first by number of mutations
#then by location of the first mutation (this makes the mutation table
#a bit prettier)
OrderStrains<-function(X.df) {
  Xstrains<-sort(unique(X.df$strain))
  len<-length(Xstrains)
  x<-rep(0,len)
  y<-rep(0,len)
  z<-rep(0,len)
  SO.df<-data.frame(strain=x,base=y,N.mut=z)
  for(i in 1:len) {
    SO.df$strain[i]<-X.df[X.df$strain==Xstrains[i],]$strain[1]
    SO.df$base[i]<-min(X.df[X.df$strain==Xstrains[i],]$base)
    nm<-length(X.df[X.df$strain==Xstrains[i],]$base)
    count=0
    for(j in X.df[X.df$strain==Xstrains[i],]$mut.type) {
      if(j == 'del') {
        count <- count + 1
      }
    }
    SO.df$N.mut[i] <- (nm - (count/2))
  }
  SO.df<-SO.df[order(SO.df$N.mut,SO.df$base),]
  SO.df
}

#Organize strains in all treatments and collect information on the number
#of mutations in each.	
for(i in 1:length(treatments)) { # loop through the treatments
  T.df<-OrderStrains(raw.seq.df[raw.seq.df$treatment==treatments[i],]) # pass all of the mutations for a particular treatment to the OrderStrains function
  ifelse(i==1, strains<-T.df$strain, strains<-c(strains,T.df$strain))
  ifelse(i==1, mutHist<-T.df$N.mut, mutHist<-c(mutHist,T.df$N.mut))
}

Nstr<-length(strains) #the number of strains to be plotted

# calculate the row width to fill the y-axis
if (row.spec.width == 0) {
  row.width<-(1-gene.width-mag.spacer-tab.spacer)/(Nstr+1)  #the width of each row (strain)
} else {
  row.width <- row.spec.width
}

#Draw confluent sections at row height for the magnified bar
for(i in 1:N.sec) {
  rect(new.sec.init[i], 1-gene.width-mag.spacer-row.width, new.sec.fin[i], 1-gene.width-mag.spacer, col=section.colors[i]) #xleft, ybottom, xright, ytop
}


#Put together a list of all the bases in the table
focal.bases <- c((sec.init[1]):(sec.fin[1]))
if(N.sec>1) {
  for(i in 2:N.sec) {
    nex <- c((sec.init[i]):(sec.fin[i]))
    focal.bases <- c(focal.bases, nex)
  }
}

#Draw the proper background colors for each strain
current.treatment <- raw.seq.df[raw.seq.df$strain==strains[1],]$treatment[1]
for(j in 1:length(treatments)) {
  if(current.treatment==treatments[j]) {
    current.color <- treatment.colors[j]
  }
}
row.of.last.color <- 0
for(i in 1:Nstr) {
  if(raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1] != current.treatment) {	
    rect(0, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i-1)), 1, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(row.of.last.color)), col=current.color, border=FALSE) #xleft, ybottom, xright, ytop
    for(j in 1:length(treatments)) {
      if(raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1]==treatments[j]) {
        current.color<-treatment.colors[j]
      }
    }
    row.of.last.color<-(i-1)
    current.treatment<-raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1]
  }
  if(i==Nstr) {
    rect(0, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)), 1, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(row.of.last.color)), col=current.color, border=FALSE)
  }	
}

#draw in the tab.spacer bp rectangles
if (bp.fill != FALSE){
  lfb<-length(focal.bases)
  bp.colors <- rep(bp.colors, ceiling(lfb/length(bp.colors)))
  bp_size <- 1/lfb
  for (pos in 1:lfb) {
    rect((pos-1)*bp_size, 1-gene.width-mag.spacer-row.width-tab.spacer, pos*bp_size, 1-gene.width-mag.spacer-row.width, col= bp.colors[pos], border=NA)
  }
  rect(0, 1-gene.width-mag.spacer-row.width-tab.spacer, 1, 1-gene.width-mag.spacer-row.width, col= NA, border='black')
}

#Draw the mutations for each strain
for(i in 1:Nstr) {
  mutations<-raw.seq.df[raw.seq.df$strain==strains[i],]$base
  type<-raw.seq.df[raw.seq.df$strain==strains[i],]$mut.type
  lfb<-length(focal.bases)
  for(j in 1:length(mutations)) {
    pos<-which(focal.bases==mutations[j])
    if(type[j]=='snp') {
      mut.col <- snp.mutation.color
    }  
    if(type[j]=='ins') {
      mut.col <- ins.mutation.color
    }
    if(type[j]=='del') {
      mut.col <- del.mutation.color
    }
    rect((pos-1)/lfb, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)), pos/lfb,1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i-1)), col=mut.col, border=NA)
    if(type[j]=='del') {
      db <- raw.seq.df[raw.seq.df$strain==strains[i] & raw.seq.df$base==mutations[j],]$delta.bases
      if(db>0) {
        end.pos<-which(focal.bases==(mutations[j]+db))
        rect((pos-1)/lfb, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)), end.pos/lfb, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i-1)), col=mut.col, border=NA)
#        for(p in pos:end.pos) {
#          rect((p-1)/lfb, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)), p/lfb, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i-1)), col=mut.col, border=NA)
#        }
        if(length(raw.seq.df[raw.seq.df$strain==strains[i] & 
                             raw.seq.df$base==(mutations[j]+db),]$delta.bases) != 1) {
          print(paste("There is an error; strain ", strains[i], 
                      " should have a deletion ending at ", mutations[j]+db, sep=""))
        }
      }
    }
  }
}

#Draw boundaries around all magnified sections in the strain rows
for(i in 1:N.sec) {
  rect(new.sec.init[i], 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*Nstr), new.sec.fin[i], 1-gene.width-mag.spacer-row.width-tab.spacer, border = border.color)
}

#Draw lines between the strains in the mutation table
row.of.last.color<-0
for(i in 1:Nstr) {
  if(i!=Nstr) {	
    rect(0, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i-1)),1, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)), border = border.color)
    for(j in 1:length(treatments)) {
      if(raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1]==treatments[j]) {
        current.color<-treatment.colors[j]
      }
    }
    row.of.last.color<-(i-1)
    current.treatment<-raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1]
  }
  if(i==Nstr) {
    rect(0,1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)),1,
         1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(row.of.last.color)),border=border.color)
  }	
}

#Draw lines around the treatments 
current.treatment <- raw.seq.df[raw.seq.df$strain==strains[1],]$treatment[1]
for(j in 1:length(treatments)) {
  if(current.treatment==treatments[j]) {
    current.color<-treatment.colors[j]
  }
}
row.of.last.color<-0

for(i in 1:Nstr) {
  if(raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1] != current.treatment) {	
    rect(0, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i-1)), 1, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(row.of.last.color)), border=treatment.border.color)
    for(j in 1:length(treatments)) {
      if(raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1]==treatments[j]) {
        current.color<-treatment.colors[j]
      }
    }
    row.of.last.color<-(i-1)
    current.treatment<-raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1]
  }
  if(i==Nstr) {
    rect(0,1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)),1,
         1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(row.of.last.color)), border=treatment.border.color)
  }	
}


#Draw histogram to the right of the table
hist.unit.height <- hist.unit.height/max(mutHist)
for(i in 1:Nstr) {
  for(j in 1:length(treatments)) {
    if(raw.seq.df[raw.seq.df$strain==strains[i],]$treatment[1]==treatments[j]) {
      color<-treatment.colors[j]
    }
  }	
  rect(1+hist.spacer, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i)), 1+hist.spacer+mutHist[i]*hist.unit.height, 1-gene.width-mag.spacer-row.width-tab.spacer-(row.width*(i-1)),
       col=color)
}


#Plot the treatment labels to the left of the table
Tlen <- numeric(length(treatments))
Totlen <- 0
for(i in 1:length(treatments)) {
  Tlen[i] <- length(unique(raw.seq.df[raw.seq.df$treatment==treatments[i],]$strain))
  Totlen <- (Totlen+Tlen[i])
}
Ty<-numeric(length(treatments))
RunTot<-0
if (row.spec.width == 0) {
  for(i in 1:length(treatments)) {
    Ty[i]<-(1-gene.width-mag.spacer-row.width-tab.spacer)*(1-RunTot-0.5*(Tlen[i]/Totlen))
    text(-treatment.label.spacer, Ty[i], treatment.labels[i], col="black",cex=treatment.label.cex, pos = 2)
    RunTot<-(RunTot+(Tlen[i]/Totlen))
  }
} else {
  for(i in 1:length(treatments)) {
    mutant.space <- row.spec.width * Nstr
    Ty[i]<-(1-gene.width-mag.spacer-row.spec.width-tab.spacer)-(mutant.space-(mutant.space*(1-RunTot-0.5*(Tlen[i]/Totlen))))
    text(-treatment.label.spacer, Ty[i], treatment.labels[i],  
         col="black",cex=treatment.label.cex, pos = 2)
    RunTot<-(RunTot+(Tlen[i]/Totlen))
  }
}

#Plot the histogram axis, numbers, and label
if (row.spec.width == 0) {
  arrows(1+hist.spacer,-hist.axis.spacer,1+hist.spacer+(max(mutHist)+1)*hist.unit.height,-hist.axis.spacer,length=2*hist.unit.height)
  for(i in 1:max(mutHist)) {
    lines(c(1+hist.spacer+(i)*hist.unit.height,1+hist.spacer+(i)*hist.unit.height),
          c(-hist.axis.spacer,-hist.axis.spacer-hist.ticks.length))
    text(1+hist.spacer+(i)*hist.unit.height,-hist.numbers.spacer,i,cex=hist.numbers.cex,pos=1)
  }
  text(1+hist.spacer+(max(mutHist)+1)*.5*hist.unit.height,-hist.label.spacer,hist.label,cex=hist.label.cex,pos=1)
} else {
  Bottom.row <- 1-gene.width-mag.spacer-row.spec.width-tab.spacer-mutant.space
  arrows(1+hist.spacer,Bottom.row-hist.axis.spacer,1+hist.spacer+(max(mutHist)+1)*hist.unit.height,Bottom.row-hist.axis.spacer,length=2*hist.unit.height)
  for(i in 1:max(mutHist)) {
    lines(c(1+hist.spacer+(i)*hist.unit.height,1+hist.spacer+(i)*hist.unit.height),
          c(Bottom.row-hist.axis.spacer,Bottom.row-hist.axis.spacer-hist.ticks.length))
    text(1+hist.spacer+(i)*hist.unit.height,Bottom.row-hist.numbers.spacer,i,cex=hist.numbers.cex,pos=1)
  }
  text(1+hist.spacer+(max(mutHist)+1)*.5*hist.unit.height,Bottom.row-hist.label.spacer,hist.label,cex=hist.label.cex,pos=1)
}
#Add size labels 
text(0, 1, paste(0, "Mb"), cex=hist.label.cex, pos=3)
text(1, 1, paste(round(N.bases/1000000, digits = 1), "Mb"),cex=hist.label.cex, pos=3)


dev.off()


 